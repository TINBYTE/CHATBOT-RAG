
'use client';

import { useState, useEffect } from 'react';
import {
  Box,
  Button,
  Radio,
  RadioGroup,
  Stack,
  Text,
  VStack,
  Alert,
  AlertIcon,
  Progress,
  Heading,
} from '@chakra-ui/react';
import { useRouter } from 'next/navigation';

const QuizPage: React.FC = () => {
  const router = useRouter();

  const [quizData, setQuizData] = useState<any | null>(null);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [isAnswered, setIsAnswered] = useState(false);
  const [timer, setTimer] = useState(20);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [score, setScore] = useState(0);
  const [userAnswers, setUserAnswers] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const currentQuestion = quizData?.questions[currentQuestionIndex];

  // Fetch the quiz data dynamically from localStorage and API
  useEffect(() => {
    const fetchQuizData = async () => {
      try {
        setLoading(true);

        // Get quiz configuration from localStorage
        const quizConfig = JSON.parse(localStorage.getItem('quizConfig') || '{}');
        console.log('Quiz configuration:', quizConfig);
        
        const { prompt, questionNbr, difficulty, questionType } = quizConfig;

        if (!prompt || !questionNbr || !difficulty || !questionType) {
          throw new Error('Invalid quiz configuration. Please start again.');
        }

        // Fetch quiz data from API
        const response = await fetch('/api/quiz/getnewquiz', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ prompt, questionNbr, difficulty, questionType }),
        });

        if (!response.ok) {
          throw new Error('Failed to fetch quiz data!!!!!!!');
        }

        const data = await response.json();
        setQuizData(data);
      } catch (err) {
        if (err instanceof Error) {
          setError(err.message || 'An error occurred while fetching the quiz');
        } else {
          setError('An error occurred while fetching the quiz');
        }
      } finally {
        setLoading(false);
      }
    };

    fetchQuizData();
  }, []);

  useEffect(() => {
    if (quizCompleted) return;

    if (timer === 0) {
      handleNextQuestion();
    }
    const interval = setInterval(() => {
      setTimer((prev) => (prev > 0 ? prev - 1 : 0));
    }, 1000);
    return () => clearInterval(interval);
  }, [timer, quizCompleted]);

  const handleAnswer = () => {
    if (!currentQuestion || !currentQuestion.question_data) return;

    setIsAnswered(true);
    const isCorrect = selectedOption === currentQuestion.question_data.correct_answer;

    if (isCorrect) {
      setScore((prevScore) => prevScore + 1);
    }

    setUserAnswers((prev) => [
      ...prev,
      {
        questionId: currentQuestionIndex + 1, // Use index as ID for now
        userResponse: selectedOption,
        isCorrect,
      },
    ]);

    if (currentQuestionIndex === quizData.questions.length - 1) {
      setQuizCompleted(true);
      saveQuizResults();
    }
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < quizData.questions.length - 1) {
      setCurrentQuestionIndex((prev) => prev + 1);
      setSelectedOption(null);
      setIsAnswered(false);
      setTimer(20);
    }
  };

  const saveQuizResults = async () => {
    try {
      const user = JSON.parse(localStorage.getItem('usertoken') || '{}');

      const response = await fetch('/api/quiz/save', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          quizData: quizData,
          userId: user.id,
          score: (score / quizData.questions.length) * 100,
          passed: score >= quizData.questions.length / 2,
          userAnswers: userAnswers,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to save quiz results');
      }

      console.log('Quiz and results saved successfully');
    } catch (error) {
      console.error('Error saving quiz results:', error);
    }
  };

  if (loading) {
    return <Box textAlign="center">Loading quiz...</Box>;
  }

  if (error) {
    return <Box textAlign="center" color="red.500">{error}</Box>;
  }

  return (
    <Box p={6} maxW="600px" mx="auto" bg="gray.50" borderRadius="lg" shadow="md">
      <Heading fontSize="2xl" fontWeight="bold" mb={6} textAlign="center">
        {quizData?.title || 'Loading Quiz...'}
      </Heading>

      {!quizCompleted && currentQuestion ? (
        <VStack spacing={6} align="stretch">
          <Text fontSize="lg" fontWeight="semibold">
            {currentQuestion.question_data.question}
          </Text>
          <RadioGroup
            onChange={(value) => setSelectedOption(value)}
            value={selectedOption || undefined}
          >
            <Stack spacing={4} direction="column">
              {Object.entries(currentQuestion.question_data.options).map(([key, option]) => (
                <Radio key={key} value={key} isDisabled={isAnswered}>
                  {option as string}
                </Radio>
              ))}
            </Stack>
          </RadioGroup>

          <Progress value={(timer / 20) * 100} colorScheme="teal" size="sm" borderRadius="md" />

          <Stack direction="row" spacing={4} justify="center">
            <Button
              colorScheme="blue"
              onClick={handleAnswer}
              isDisabled={isAnswered || !selectedOption}
            >
              Submit Answer
            </Button>
            <Button
              colorScheme="green"
              onClick={handleNextQuestion}
              isDisabled={!isAnswered || currentQuestionIndex === quizData.questions.length - 1}
            >
              Next Question
            </Button>
          </Stack>
        </VStack>
      ) : (
        <VStack spacing={6}>
          <Alert status="success" borderRadius="md">
            <AlertIcon />
            Quiz completed! Your score is {score}/{quizData?.questions.length}.
          </Alert>
          <Button colorScheme="blue" onClick={() => router.push('/chat')} size="lg">
            Go to Chat
          </Button>
        </VStack>
      )}
    </Box>
  );
};

export default QuizPage;
